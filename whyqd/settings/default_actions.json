{
	"fields": [
		{
			"name": "NEW",
			"type": "action",
			"title": "New",
			"description": "Create a new field and assign a set value.",
			"structure": ["value"]
		},
		{
			"name": "RENAME",
			"type": "action",
			"title": "Rename",
			"description": "Rename an existing field to conform to a schema name. Only valid where a single field is provided.",
			"structure": ["field"]
		},
		{
			"name": "ORDER",
			"type": "action",
			"title": "Order",
			"description": "Use sparse data from a list of fields to populate a new field. Order is important, each successive field in the list have priority over the ones before it (e.g. for columns A, B & C, values in C will have precedence over values in B and A).",
			"structure": ["field"]
		},
		{
			"name": "ORDER_NEW",
			"type": "action",
			"title": "Order by newest",
			"description": "Use sparse data from a list of fields to populate a new field order by most recent value. Field-pairs required, with the first containing the values, and the second the dates for comparison, linked by a '+' modifier (e.g. A+dA, B+dB, C+dC, values with the most recent associated date will have precedence over other values).",
			"structure": ["field", "modifier", "field"],
			"modifiers": [
				{
					"name": "+",
					"title": "Links",
					"type": "modifier"
				}
			]
		},
		{
			"name": "ORDER_OLD",
			"type": "action",
			"title": "Order by oldest",
			"description": "Use sparse data from a list of fields to populate a new field order by the oldest value. Field-pairs required, with the first containing the values, and the second the dates for comparison, linked by a '+' modifier (e.g. A+dA, B+dB, C+dC, values with the oldest associated date will have precedence over other values).",
			"structure": ["field", "modifier", "field"],
			"modifiers": [
				{
					"name": "+",
					"title": "Links",
					"type": "modifier"
				}
			]
		},
		{
			"name": "CALCULATE",
			"type": "action",
			"title": "Calculate",
			"description": "Derive a calculation from a list of fields. Each field must have a modifier, including the first (e.g. +A -B +C).",
			"structure": ["modifier", "field"],
			"modifiers": [
				{
					"name": "+",
					"title": "Add",
					"type": "modifier"
				},
				{
					"name": "-",
					"title": "Subtract",
					"type": "modifier"
				}
			]
		},
		{
			"name": "CATEGORISE",
			"type": "action",
			"title": "Categorise",
			"description": "Apply categories to a list of columns. Each field must have a modifier, including the first (e.g. +A -B +C). '-' modifier indicates presence/absence of values as true/false for a specific term. '+' modifier indicates that the unique terms in the field must be matched to the unique terms defined in the schema. This is a two-step process, first requiring listing the columns effected, then applying the terms.",
			"structure": ["modifier", "field"],
			"modifiers": [
				{
					"name": "+",
					"title": "Uniques",
					"type": "modifier"
				},
				{
					"name": "-",
					"title": "Values",
					"type": "modifier"
				}
			]
		},
		{
			"name": "JOIN",
			"type": "action",
			"title": "Join",
			"description": "Join values in different fields to create a new concatenated value. Each value will be converted to a string (e.g. A: 'Word 1' B: 'Word 2' => 'Word 1 Word 2').",
			"structure": ["field"]
		}
	]
}